{% for instance in bgp_routing_instances %}
{% set loopback = interfaces | selectattr('name', 'equalto', 'Loopback0') | list | first %}
{% set loopback_ip = loopback['ip_addresses'] | selectattr('address', 'match', '^[0-9]+\\.') | map(attribute='address') | map('regex_replace', '/.*', '') | list | first %}
router bgp {{ instance.autonomous_system.asn }}
  router-id {{ loopback_ip }}
  no bgp default ipv4-unicast
  maximum-paths 4 ecmp 4
  {# -- Peer-group definitions -- #}
  {% for pg in instance.peer_groups %}
  neighbor {{ pg.name }} peer group
  {% if pg.source_interface %}
  neighbor {{ pg.name }} update-source {{ pg.source_interface.name }}
  {% endif %}
  {% if pg.extra_attributes.bfd is defined and pg.extra_attributes.bfd %}
  neighbor {{ pg.name }} bfd
  {% endif %}
  {% if pg.extra_attributes['ebgp-multihop'] is defined %}
  neighbor {{ pg.name }} ebgp-multihop {{ pg.extra_attributes['ebgp-multihop'] }}
  {% endif %}
  {% if pg.extra_attributes['next-hop-unchanged'] %}
  neighbor {{ pg.name }} next-hop-unchanged
  {% endif %}
  {% if pg.extra_attributes['next-hop-self'] %}
  neighbor {{ pg.name }} next-hop-self
  {% endif %}
  {% if pg.extra_attributes['send-community'] %}
  neighbor {{ pg.name }} send-community
  {% endif %}
  {% if pg.extra_attributes['maximum-routes'] is not none %}
  neighbor {{ pg.name }} maximum-routes {{ pg.extra_attributes['maximum-routes'] }}
  {% endif %}
  {% if pg.secret and pg.secret.name %}
  neighbor {{ pg.name }} password 7 {{ pg.secret.name }}
  {% endif %}
  {% endfor %}
  {# -- Neighbor IP bindings -- #}
  {% for ep in instance.endpoints %}
  {% set peer_ip = ep.peer.source_ip.address | ipaddr('address') %}
  {% set peer_group = ep.peer_group.name if ep.peer_group else none %}
  {% set peer_asn = ep.peer.autonomous_system.asn %}
  {% set peer_desc = ep.peer.description %}
  neighbor {{ peer_ip }} remote-as {{ peer_asn }}
  {% if peer_group %}
  neighbor {{ peer_ip }} peer group {{ peer_group }}
  {% endif %}
  {% if peer_desc %}
  neighbor {{ peer_ip }} description {{ peer_desc }}
  {% endif %}
  {% endfor %}
  redistribute connected route-map RM-CONN-2-BGP
  !
  {# -- Address-family activation -- #}
  {% set afi_map = {
    'IPV4_UNICAST': 'ipv4',
    'IPV6_UNICAST': 'ipv6',
    'L2_EVPN': 'evpn'
  } %}
  {% set instance_afis = instance.address_families | map(attribute='afi_safi') | list %}
  {% set pg_afis = instance.peer_groups | map(attribute='address_families') | sum(start=[]) | map(attribute='afi_safi') | list %}
  {% set all_afis = (instance_afis + pg_afis) | unique %}
  {% for afi_code in all_afis %}
  {% set afi_safi = afi_map.get(afi_code) %}
  {% if afi_safi %}
  address-family {{ afi_safi }}
    {% for pg in instance.peer_groups %}
    {% set match = pg.address_families | selectattr('afi_safi', 'equalto', afi_code) | list %}
    {% if match | length > 0 %}
    neighbor {{ pg.name }} activate
    {% set af = match[0] %}
    {% if af.import_policy %}
    neighbor {{ pg.name }} route-map {{ af.import_policy }} in
    {% endif %}
    {% if af.export_policy %}
    neighbor {{ pg.name }} route-map {{ af.export_policy }} out
    {% endif %}
    {% elif afi_safi == 'ipv4' %}
    no neighbor {{ pg.name }} activate
    {% endif %}
    {% endfor %}
    {% for ep in instance.endpoints %}
    {% set peer = ep.peer %}
    {% set peer_ip = peer.source_ip.address | ipaddr('address') %}
    {% for af in peer.address_families %}
    {% if af.afi_safi == afi_code %}
    neighbor {{ peer_ip }} activate
    {% if af.import_policy %}
    neighbor {{ peer_ip }} route-map {{ af.import_policy }} in
    {% endif %}
    {% if af.export_policy %}
    neighbor {{ peer_ip }} route-map {{ af.export_policy }} out
    {% endif %}
    {% endif %}
    {% endfor %}
    {% endfor %}
  exit-address-family
  !
  {% endif %}
  {% endfor %}
{% endfor %}